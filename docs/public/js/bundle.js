(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var Const = {};

Const.WHITE_KEYS = ["C", "D", "E", "F", "G", "A", "B"];
Const.BLACK_KEYS_SHARP = ["C#", "D#", "F#", "G#", "A#"];
Const.BLACK_KEYS_FLAT = ["Db", "Eb", "Gb", "Ab", "Bb"];

Const.KEYBORDS = [Const.WHITE_KEYS[0], Const.BLACK_KEYS_SHARP[0], Const.WHITE_KEYS[1], Const.BLACK_KEYS_SHARP[1], Const.WHITE_KEYS[2], Const.WHITE_KEYS[3], Const.BLACK_KEYS_SHARP[2], Const.WHITE_KEYS[4], Const.BLACK_KEYS_SHARP[3], Const.WHITE_KEYS[5], Const.BLACK_KEYS_SHARP[4], Const.WHITE_KEYS[6]];

Const.DEGREE_HALFTONE_COUNT = {
    1: 0,
    2: 2,
    3: 4,
    4: 5,
    5: 7,
    6: 9,
    7: 11
};

Const.CHORD_OPTIONS = ["MINOR", "SUS2", "SUS4", "OMIT", "FLAT5", "AUGMENT", "7th", "MAJOR7", "ADD"];

module.exports = Const;

},{}],2:[function(require,module,exports){
"use strict";

var Key = require("./key");

$(document).ready(function () {
    $("li").click(function () {
        var li = $(this);
        var isRemove = li.parent().hasClass("sharpFlat") && li.hasClass("selected");
        li.siblings("li").removeClass("selected");
        if (isRemove) {
            li.removeClass("selected");
        } else {
            li.addClass("selected");
        }
        var selected = "";
        $("li.selected").each(function () {
            selected += $(this).text();
        });
        var key = new Key();
        var tds = $(".result td");
        var result = key.setKeyDegree(selected.replace("♭", "b"), $("input").val());
        $(".result th").each(function (idx) {
            var result = key.setKeyDegree(selected.replace("♭", "b"), idx + 1);
            tds.eq(idx).text(result.key.replace("b", "♭"));
        });
    });
    $("#calcButton").click(function () {
        var selected = "";
        $("li.selected").each(function () {
            selected += $(this).text();
        });
        var key = new Key();
        var result = key.setKeyDegree(selected.replace("♭", "b"), $("input").val());
        var va = "";
        if (1 <= result.octaves) {
            va = 8 * result.octaves + "va";
        } else if (result.octaves <= -1) {
            va = 8 * result.octaves + "va bassa";
        }
        $(".resultKey").text(result.key.replace("b", "♭") + va);
    });
});

},{"./key":3}],3:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Const = require("./const");

var Key = function () {
    function Key(key, octaves) {
        _classCallCheck(this, Key);

        this.key = key || Const.WHITE_KEYS.C;
        this.octaves = octaves || 0;
    }

    _createClass(Key, [{
        key: "convertFlatToSharp",
        value: function convertFlatToSharp(flatKey) {
            var index = Const.BLACK_KEYS_FLAT.indexOf(flatKey);
            if (index == -1) {
                return null;
            }
            return Const.BLACK_KEYS_SHARP[index];
        }
    }, {
        key: "setKeyDegree",
        value: function setKeyDegree(rootKey, degree) {
            var sharp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var flat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            var sharpkey = this.convertFlatToSharp(rootKey);
            rootKey = sharpkey || rootKey;

            var octaves = 0;
            var octaveDegree = 8;
            if (flat === true && sharp === true) {
                flat = false;
                sharp = false;
            }
            if (flat === true) {
                degree--;
                sharp = true;
                flat = false;
            }
            while (octaveDegree <= degree) {
                octaves++;
                degree = degree - (octaveDegree - 1);
            }
            var distance = Const.DEGREE_HALFTONE_COUNT[degree.toString()];

            var keybords = Const.KEYBORDS;
            var rootIdx = keybords.indexOf(rootKey);
            if (sharp) {
                rootIdx = rootIdx + 1;
            } else if (flat) {
                rootIdx = rootIdx - 1;
            }
            if (1 <= rootIdx) {
                keybords = keybords.slice(rootIdx).concat(keybords.slice(0, rootIdx));
            }

            return {
                "octaves": octaves,
                "key": keybords[distance],
                "distance": distance
            };
        }
    }]);

    return Key;
}();

module.exports = Key;

},{"./const":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
